/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'signing'
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

ext.projectName = rootProject.name
ext.projectGroup = "com.perforce.halm"
ext.projectDescription = "Helix ALM Automation Build reporting tool"
ext.projectVersion = currentVersion
ext.projectURL = 'https://github.com/perforce/helix-alm-reporting-tool'
ext.projectSCM = 'scm:git:git://github.com/perforce/helix-alm-reporting-tool.git'
ext.projectLicense = 'https://github.com/perforce/helix-alm-reporting-tool/blob/master/LICENSE.txt'
ext.developerID = 'vincenpt'
ext.developerName = 'Paul Vincent'
ext.developerEmail = 'pvincent@perforce.com'

allprojects {
    group = "com.perforce.halm"
    archivesBaseName = rootProject.name
    version = currentVersion
}

repositories {
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'info.picocli:picocli:4.6.3'
    implementation 'com.perforce.halm.rest:halm-rest-client:1.2.2'
    implementation 'org.apache.commons:commons-text:1.9'

    // JAX-B dependencies for JDK 9+
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:2.3.2"
    implementation "org.glassfish.jaxb:jaxb-runtime:2.3.6"

    // Annotation Processors
    annotationProcessor 'info.picocli:picocli-codegen:4.6.2'
}

application {
    // Define the main class for the application.
    mainClass = 'com.perforce.halm.reportingtool.App'
}

java {
    withJavadocJar()
    withSourcesJar()
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

jar {
    exclude('.MySCMServerInfo')

    manifest {
        attributes 'Implementation-Title': 'Helix ALM Reporting Tool',
                   'Implementation-Version': currentVersion
    }
}

javadoc {
    exclude('.MySCMServerInfo')
}

javadocJar {
    classifier = 'javadoc'
    from javadoc
}

sourcesJar {
    exclude('.MySCMServerInfo')

    classifier = 'sources'
    from sourceSets.main.allSource
}

distZip {
    exclude('.MySCMServerInfo')
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }

    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")

    useInMemoryPgpKeys(signingKey, signingPassword)

    sign configurations.archives
    sign publishing.publications
}


eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    reports {
        junitXml.enabled = true
        html.enabled = false
    }
}

publishing {
    repositories {
        if (isReleaseVersion) {
            // Only try to publish to the release staging if this is a release build
            maven {
                name = "ossrh"
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = findProperty('ossrhUsername')
                    password = findProperty('ossrhPassword')
                }
            }

        } else {
            // Only try to publish to 'snapshots' if this IS a snapshot build.
            maven {
                name = "ossrhSnapshot"
                url = "https://oss.sonatype.org/content/repositories/snapshots/"
                credentials {
                    username = findProperty('ossrhUsername')
                    password = findProperty('ossrhPassword')
                }
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = projectName
                artifactId = projectName
                packaging = 'jar'
                description = projectDescription
                url = projectURL

                scm {
                    connection = projectSCM
                    developerConnection = projectSCM
                    url = projectURL
                }

                licenses {
                    license {
                        name = 'MIT Licence'
                        url = projectLicense
                    }
                }

                developers {
                    developer {
                        id = developerID
                        name = developerName
                        email = developerEmail
                    }
                }
            }
        }
    }
}